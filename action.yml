name: 'Docker Build And Push to registry GitHub Action'
inputs:
  image:
    description: 'Name of the Docker image'
    required: true
  tag:
    description: 'Tags override for Docker image'
    required: false
  registry:
    description: 'Target Docker registry'
    required: true
  dockerfile:
    description: 'Location of Dockerfile, if not Dockerfile in root directory'
    required: false
    default: 'Dockerfile'
  directory:
    description: 'Directory to run `docker build` from, if not project root'
    required: false
  buildArgs:
    description: 'Docker build arguments in format KEY=VALUE,KEY=VALUE'
    required: false
  username:
    description: 'Docker registry username'
    required: false
  password:
    description: 'Docker registry password'
    required: false
outputs:
  tag:
    description: 'Tags for the Docker image'
    value: ${{ steps.docker_build_step.outputs.tag }}

runs:
  using: "composite"
  steps:
    - name: Login to docker registry if private registry
      run: |
        if [[ ${{ inputs.username }} ]]
        then
          sudo docker login ${{ inputs.registry }} -u ${{ inputs.username }} -p ${{ inputs.password }}
        fi
      shell: bash
    - name: Build Docker Image
      id: docker_build_step
      run: |
        if [[ ${{ inputs.directory }} ]]
        then
          cd ${{ inputs.directory }}
        fi

        if [[ ${{ inputs.tag }} ]]
        then
          tag=${{ inputs.tag }}
        else
          tag=latest
        fi

        if [[ ${{ inputs.dockerfile }} ]]
        then
          dockerfile=${{ inputs.dockerfile }}
        else
          dockerfile=Dockerfile
        fi

        build_args_statement=""
        if [[ "${{ inputs.buildArgs }}" ]]
        then
          for build_arg in $(echo ${{ inputs.buildArgs }} | sed 's/,/ /g')
          do
            build_args_statement=$(echo $build_args_statement --build-arg $build_arg )
          done
        fi
        sudo docker build -t ${{ inputs.registry }}/${{ inputs.image }}:$tag -f $dockerfile $build_args_statement .
        echo "::set-output name=tag::$tag
      shell: bash
    - name: Push Docker Image
      run: |
        sudo docker push ${{ inputs.registry }}/${{ inputs.image }}:${{ steps.docker_build_step.outputs.tag }}
        sudo docker push ${{ inputs.registry }}/${{ inputs.image }}:latest
      shell: bash

branding:
  icon: 'repeat'
  color: 'blue'